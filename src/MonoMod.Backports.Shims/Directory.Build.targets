<?xml version="1.0" encoding="utf-8" ?>
<Project>

  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

  <ItemGroup>
    <ProjectReference Include="$(MMSourcePath)ShimGen\ShimGen.csproj"
                      Reference="false" ReferenceOutputAssembly="false"
                      OutputItemType="MMShimGen"
                      Private="false" Pack="false"
                      SetTargetFramework="TargetFramework=net9.0"
                      SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>

  <ItemDefinitionGroup>
    <PackageReference>
      <Shim>false</Shim>
    </PackageReference>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <_ShimsDir>$(IntermediateOutputPath)shims/</_ShimsDir>
    <_OutputTfmsTxt>$(IntermediateOutputPath)tfms.txt</_OutputTfmsTxt>
  </PropertyGroup>

  <Target Name="_ConfigureShimmedPackageRefs"
          BeforeTargets="CollectPackageReferences">
    <ItemGroup>
      <PackageReference Update="@(PackageReference)" Condition="'%(Shim)' == 'true'">
        <PrivateAssets>none</PrivateAssets>
        <Pack>false</Pack>
        <GeneratePathProperty>true</GeneratePathProperty>
      </PackageReference>
    </ItemGroup>
  </Target>
  
  <Target Name="_GetShimmedPackages"
          DependsOnTargets="_ConfigureShimmedPackageRefs">
    <ItemGroup>
      <_ShimmedPackages Include="@(PackageReference)" Condition="'%(Shim)' == 'true'">
        <PkgProp>Pkg$([System.String]::Copy('%(Identity)').Replace('.','_'))</PkgProp>
      </_ShimmedPackages>
    </ItemGroup>
    <ItemGroup>
      <_ShimmedPackages>
        <PkgPath>$(%(PkgProp))</PkgPath>
      </_ShimmedPackages>
    </ItemGroup>
  </Target>

  <Target Name="BuildShims"
          BeforeTargets="CoreCompile"
          DependsOnTargets="$(CoreCompileDependsOn);_GetShimmedPackages;ResolveProjectReferences"
          Inputs="$(MSBuildAllProjects);@(MMShimGen)"
          Outputs="$(_OutputTfmsTxt)"
          Condition="'$(dotnet-nugetize)' == ''"
          >

    <ItemGroup>
      <_ExistingShimFiles Include="$(_ShimsDir)**/*" />
    </ItemGroup>
    
    <Delete Files="@(_ExistingShimFiles)" Condition="Exists('$(_ShimsDir)')" />
    <MakeDir Directories="$(_ShimsDir)" Condition="!Exists('$(_ShimsDir)')"  />

    <PropertyGroup>
      <_NativeExecutableExtension Condition="'$(_NativeExecutableExtension)' == '' and '$(OS)' == 'Windows_NT'">.exe</_NativeExecutableExtension>
      <_ShimGenExe>%(MMShimGen.RelativeDir)%(FileName)$(_NativeExecutableExtension)</_ShimGenExe>
      <_SnkDir>$(MMRootPath)snk/</_SnkDir>
    </PropertyGroup>

    <ItemGroup>
      <_PPArguments Remove="@(_PPArguments)" />
      <_PPArguments Include="$(_ShimsDir)" /> <!-- 1: the output directory -->
      <_PPArguments Include="$(_SnkDir)" /> <!-- 2: snk directory -->
      <!-- 3: the paths to the packages to process -->
      <_PPArguments Include="%(_ShimmedPackages.PkgPath)" />
    </ItemGroup>

    <Exec ConsoleToMsBuild="true" LogStandardErrorAsError="false"
      Command="&quot;$(_ShimgenExe)&quot; @(_PPArguments->'&quot;%(Identity)&quot;',' ')">
      <Output TaskParameter="ExitCode" PropertyName="_ExitCode" />
      <Output TaskParameter="ConsoleOutput" ItemName="_ShimGenOutput" />
    </Exec>

    <ItemGroup>
      <_ShimFiles Include="$(_ShimsDir)**/*.dll" />
      <FileWrites Include="@(_ShimFiles)" />

      <IntermediateAssembly Remove="@(IntermediateAssembly)" />
      <!--<IntermediateAssembly Include="@(_PatchedFiles)" />-->
      <_DebugSymbolsIntermediatePath Remove="@(_DebugSymbolsIntermediatePath)" />
      <_ShimFiles Include="$(_ShimsDir)**/*.pdb" />
      <DocFileItem Remove="@(DocFileItem)" />
      <_ShimFiles Include="$(_ShimsDir)*.xml" />
    </ItemGroup>

    <Error Text="ShimGen failed" Condition="'$(_ExitCode)' != '0'" />
    
    <!-- Locate the TFMs to generate in the package -->
    <ItemGroup>
      <_TfmDirs Include="$([System.String]::Copy('%(_ShimGenOutput.Identity)').Replace('tfm:', ''))"
                Condition="$([System.String]::Copy('%(_ShimGenOutput.Identity)').StartsWith('tfm:'))" />
    </ItemGroup>
    
    <!-- Then we'll write the target tfms to a file, which will later be read and use to construct the package -->
    <WriteLinesToFile File="$(_OutputTfmsTxt)" Lines="@(_TfmDirs)" WriteOnlyWhenDifferent="false" Overwrite="true" />
  </Target>

  <Target Name="_CopyShimsToOutputRecursive"
          DependsOnTargets="BuildShims"
          BeforeTargets="CopyFilesToOutputDirectory"
          Inputs="@(_ShimFiles)"
          Outputs="@(_ShimFiles->'$(OutDir)%(RecursiveDir)%(Filename)%(Extension)'">
    <Copy SourceFiles="@(_ShimFiles)" DestinationFolder="$(OutDir)%(RecursiveDir)" />
  </Target>
  
  <!-- Packaging stuff -->
  
  <Target Name="_SetUpShimPackagePaths"
          DependsOnTargets="BuildShims">

    <ItemGroup>
      <PackageFile Include="%(_ShimFiles.Identity)"
                   TargetFramework="$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName('%(_ShimFiles.RecursiveDir)'))))"
                   PackFolder="lib" />
    </ItemGroup>

    <!-- Make sure all output TFMs have a dummy  -->
    <ItemGroup>
      <_PackageMinTfms Include="$(PackageMinTfms)" />
    </ItemGroup>
    <PropertyGroup>
      <_TfmsWithFiles>@(PackageFile->'%(TargetFramework)')</_TfmsWithFiles>
    </PropertyGroup>
    <ItemGroup>
      <_PackageMinTfms Include="@(PackageFile->'%(TargetFramework)')" />
    </ItemGroup>

    <MakeDir Directories="@(_PackageMinTfms->'$(IntermediateOutputPath)%(Identity)')" ContinueOnError="true" />
    <WriteLinesToFile File="$(IntermediateOutputPath)%(_PackageMinTfms.Identity)\_._" Overwrite="true" ContinueOnError="true" />
    
    <ItemGroup>
      <PackageFile Include="$(IntermediateOutputPath)%(_PackageMinTfms.Identity)\_._"
                   TargetFramework="%(_PackageMinTfms.Identity)"
                   PackFolder="lib"
                   Condition="!$([System.String]::Copy('$(_TfmsWithFiles)').Contains('%(_PackageMinTfms.Identity)'))" />
    </ItemGroup>

  </Target>

  <Target Name="_BuildPackageConflictOverrides" DependsOnTargets="_GetShimmedPackages">
    <PropertyGroup>
      <_OverridePackages>@(_ShimmedPackages->'%(Identity)|%(Version)')</_OverridePackages>
      <_ImportedPropOpen><![CDATA[<$(PackageId.Replace('.','_'))_Imported>]]></_ImportedPropOpen>
      <_ImportedPropClose><![CDATA[</$(PackageId.Replace('.','_'))_Imported>]]></_ImportedPropClose>
      <_BuildFileContent>
        <Project>
          <PropertyGroup>
            $(_ImportedPropOpen)true$(_ImportedPropClose)
          </PropertyGroup>
          <ItemGroup Condition="'%24(DisableDefaultPackageConflictOverrides)' != 'true' and '%24(DisableBackportsPackageConflictOverrides)' != 'true'">
            <PackageConflictOverrides Include="$(PackageId)">
              <OverriddenPackages>$(_OverridePackages)</OverriddenPackages>
            </PackageConflictOverrides>
          </ItemGroup>
        </Project>
      </_BuildFileContent>
      <_BuildTransitiveContent>
        <Project>
          <Import Project="%24(MSBuildThisFileDirectory)../build/$(PackageId).targets" Condition="'%24($(PackageId.Replace('.','_'))_Imported)' != 'true'" />
        </Project>
      </_BuildTransitiveContent>
      
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateOutputPath)pkgBuild;$(IntermediateOutputPath)pkgBuildTransitive" />
    <WriteLinesToFile File="$(IntermediateOutputPath)pkgBuild/$(PackageId).targets" Overwrite="true" Lines="$([MSBuild]::Escape('$(_BuildFileContent)'))" />
    <WriteLinesToFile File="$(IntermediateOutputPath)pkgBuildTransitive/$(PackageId).targets" Overwrite="true" Lines="$([MSBuild]::Escape('$(_BuildTransitiveContent)'))" />

    <ItemGroup>
      <PackageFile Include="$(IntermediateOutputPath)pkgBuild/$(PackageId).targets"
                   PackFolder="build" />
      <PackageFile Include="$(IntermediateOutputPath)pkgBuildTransitive/$(PackageId).targets"
                   PackFolder="buildTransitive" />
    </ItemGroup>
    
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)ApiCompat.targets" />
  
</Project>