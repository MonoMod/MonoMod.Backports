<?xml version="1.0" encoding="utf-8" ?>
<Project>

  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />
  
  <ItemGroup>
    <!-- Filter application -->
    <ProjectReference Include="$(MMSourcePath)MonoMod.Backports.Filter\MonoMod.Backports.Filter.csproj" 
                      Reference="false" ReferenceOutputAssembly="false" 
                      OutputItemType="BackportsFilter" Private="false"
                      SetTargetFramework="TargetFramework=net6.0"
                      SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>

  <PropertyGroup>
    <_MSBPropsFile>$(IntermediateOutputPath)Backports.TfmFilter.props</_MSBPropsFile>
    <_FileOptionsPath>$(IntermediateOutputPath)to_compile.txt</_FileOptionsPath>
    <_ToRemovePath>$(IntermediateOutputPath)to_remove.txt</_ToRemovePath>
  </PropertyGroup>

  <Import Project="$(_MSBPropsFile)" Condition="Exists('$(_MSBPropsFile)')"/>
  
  <Target Name="_WriteFileOptions"
          Inputs="@(Compile);@(__CompileRemoved)" Outputs="$(_FileOptionsPath)">
    <WriteLinesToFile File="$(_FileOptionsPath)" Overwrite="true" WriteOnlyWhenDifferent="true" Lines="@(Compile);@(__CompileRemoved)" />
    <ItemGroup>
      <FileWrites Include="$(_FileOptionsPath)" />
    </ItemGroup>
  </Target>

  <Target Name="_ComputeFilterBinaryPath" Returns="$(_BackportsFilterBinary)">
    <PropertyGroup>
      <_NativeExecutableExtension Condition="'$(_NativeExecutableExtension)' == '' and '$(OS)' == 'Windows_NT'">.exe</_NativeExecutableExtension>
      <_BackportsFilterBinary>%(BackportsFilter.RelativeDir)%(FileName)$(_NativeExecutableExtension)</_BackportsFilterBinary>
    </PropertyGroup>
  </Target>

  <Target Name="_GenerateBPPropsFile" DependsOnTargets="_WriteFileOptions;_ComputeFilterBinaryPath"
          Inputs="$(_FileOptionsPath);$(_ComputeFilterBinaryPath)" Outputs="$(_MSBPropsFile)">
    <ItemGroup>
      <_GenArguments Include="$(_FileOptionsPath)"/>
      <_GenArguments Include="$(_MSBPropsFile)" />
    </ItemGroup>

    <Exec Command="&quot;$(_BackportsFilterBinary)&quot; gen @(_GenArguments->'&quot;%(Identity)&quot;',' ')">
      <Output TaskParameter="ExitCode" PropertyName="_FilterExitCode" />
    </Exec>

    <Error Text="Gen failed" Condition="'$(_FilterExitCode)' != '0'" />

    <ItemGroup>
      <FileWrites Include="$(_MSBPropsFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_RunFilterOnFiles" DependsOnTargets="_WriteFileOptions;_ComputeFilterBinaryPath"
          Inputs="$(_FileOptionsPath);$(_ComputeFilterBinaryPath)" Outputs="$(_ToRemovePath)">
    <ItemGroup>
      <_FilterArguments Include="$(_FileOptionsPath)"/>
      <_FilterArguments Include="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)'))" />
      <_FilterArguments Include="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)'))" />
      <_FilterArguments Include="$(_ToRemovePath)" />
    </ItemGroup>
    
    <Exec Command="&quot;$(_BackportsFilterBinary)&quot; filter @(_FilterArguments->'&quot;%(Identity)&quot;',' ')">
      <Output TaskParameter="ExitCode" PropertyName="_FilterExitCode" />
    </Exec>

    <Error Text="Filter failed" Condition="'$(_FilterExitCode)' != '0'" />

    <ItemGroup>
      <FileWrites Include="$(_ToRemovePath)" />
    </ItemGroup>
  </Target>
  
  <!-- Conditionally importing based on TFMs, but automated -->
  <PropertyGroup>
    <CoreCompileDependsOn>FilterTFMRestrictedFiles;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>
  
  <Target Name="FilterTFMRestrictedFiles" DependsOnTargets="_RunFilterOnFiles;_GenerateBPPropsFile">
    <ReadLinesFromFile File="$(_ToRemovePath)">
      <Output TaskParameter="Lines" ItemName="_ItemsToFilter" />
    </ReadLinesFromFile>

    <ItemGroup>
      <Compile Remove="@(_ItemsToFilter)" />
    </ItemGroup>
  </Target>

</Project>